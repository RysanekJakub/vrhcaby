Index: src/vrhcaby.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nimport os\r\nimport json\r\n\r\n# zajistuje barvy textu\r\nos.system(\"\")\r\n\r\nclass style():\r\n    BLACK = '\\033[30m'\r\n    RED = '\\033[31m'\r\n    GREEN = '\\033[32m'\r\n    YELLOW = '\\033[33m'\r\n    BLUE = '\\033[34m'\r\n    LIGHT_BLUE = '\\033[38;2;0;255;243m'\r\n    MAGENTA = '\\033[35m'\r\n    CYAN = '\\033[36m'\r\n    WHITE = '\\033[37m'\r\n    UNDERLINE = '\\033[4m'\r\n    RESET = '\\033[0m'\r\n\r\n    # vycisti konzoli\r\n    def clear():\r\n        os.system(\"cls\")\r\n\r\n\r\n\r\nclass Game:\r\n    \r\n    def __init__(self, gameboard, pozice, player1, player2) -> None:\r\n        # herni pole\r\n        self._gameboard = gameboard\r\n        # dvojkostka\r\n        self._doubledice = []\r\n        self._spikes = [[] for j in range(24)]\r\n        # bar\r\n        self._bar = ...\r\n        self._stone = pozice\r\n        self._turn = 0\r\n        self._player_turn = \"player1\"\r\n        self._player1 = player1\r\n        self._player2 = player2\r\n        self._last_command = \"\"\r\n\r\n    @property\r\n    def doubledice(self):\r\n        return self._doubledice\r\n\r\n    @doubledice.setter\r\n    def doubledice(self, value):\r\n        self._doubledice = value\r\n    \r\n    @property\r\n    def gameboard(self):\r\n        return self._gameboard\r\n    \r\n    @property\r\n    def spikes(self):\r\n        return self._spikes\r\n    \r\n    @property\r\n    def last_command(self):\r\n        return self._last_command\r\n    \r\n    @last_command.setter\r\n    def last_command(self, value):\r\n        self._last_command = value\r\n\r\n    def throw_dice(self, dice:list) -> None:\r\n        dice.clear()\r\n        hod1, hod2 = random.randint(1, 6), random.randint(1, 6)\r\n        # kontrola hozenych hodnot\r\n        if hod1 != hod2:\r\n            dice.append(str(hod1))\r\n            dice.append(str(hod2))\r\n            return dice\r\n        # pokud se cisla rovnaji, vrati se 4x\r\n        else:\r\n            for _ in range(4):\r\n                dice.append(str(hod1))\r\n            return dice\r\n    \r\n    def spike_occupancy(self, spike_list:list) -> str:\r\n        \r\n        # nedokonceny system\r\n        # vypisuje obsazenost spiku a zajistuje formatovani\r\n        if 0 <= len(spike_list) < 10:\r\n            remaining_spaces = \" \" * 5 # <-- doplneni mezer\r\n        else:                          #    |\r\n            remaining_spaces = \" \" * 4 # <--|\r\n        return f\"[{len(spike_list)}]{remaining_spaces}\"\r\n\r\n\r\n    def gameboard_final(self, values:list, spikes:list, command:str) -> str:\r\n        s = spikes\r\n        # dopocet chybejicich mezer kvuli formatovani\r\n        if len(values) == 2:\r\n            spaces = 156*\" \"\r\n        else:\r\n            spaces = 150*\" \"\r\n        \r\n        # tvorba cislovani spiku\r\n        spike_row1 = ([str(_) for _ in range(1,7)], [str(_) for _ in range(7,10)], [str(_) for _ in range(10,13)])\r\n        spike_row2 = ([str(_) for _ in range(13,19)], [str(_) for _ in range(19, 25)])\r\n\r\n        # zatim je v tom bordel, pochopitelne to neni ani zdaleka finalni\r\n        gameboard = f\"\"\"\r\n             _________________________________________________________________________________________________________________________________________________________________________________\r\n            | Poslední příkaz: {command}\r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            | Kolo: {self._turn}                                                                                                                                                                         |\r\n            | Hraje: {self._player_turn}                                                                                                                                                                  |\r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            | Hozené hodnoty: {style.LIGHT_BLUE}{\"  \".join(values)}{style.RESET}{spaces}| \r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            |{style.RED}       {\"             \".join(spike_row1[0])}                    {\"             \".join(spike_row1[1])}             {\"            \".join(spike_row1[2])}{style.RESET}       |\r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            | \\    {self.spike_occupancy(s[0])}/\\     {s[1]}     /\\     {s[2]}     /\\     {s[3]}     /\\     {s[4]}     /\\     {s[5]}     /  | |  \\            /\\            /\\            /\\            /\\            /\\            / |\r\n            |  \\          /  \\          /  \\          /  \\          /  \\          /  \\          /   | |   \\          /  \\          /  \\          /  \\          /  \\          /  \\          /  |\r\n            |   \\        /    \\        /    \\        /    \\        /    \\        /    \\        /    | |    \\        /    \\        /    \\        /    \\        /    \\        /    \\        /   |\r\n            |    \\      /      \\      /      \\      /      \\      /      \\      /      \\      /     | |     \\      /      \\      /      \\      /      \\      /      \\      /      \\      /    |\r\n            |     \\    /        \\    /        \\    /        \\    /        \\    /        \\    /      | |      \\    /        \\    /        \\    /        \\    /        \\    /        \\    /     |\r\n            |      \\  /          \\  /          \\  /          \\  /          \\  /          \\  /       | |       \\  /          \\  /          \\  /          \\  /          \\  /          \\  /      |\r\n            |       \\/            \\/            \\/            \\/            \\/            \\/        | |        \\/            \\/            \\/            \\/            \\/            \\/       |\r\n            |                                                                                       | |                                                                                       |\r\n            |                                                                                       | |                                                                                       |\r\n            |                                                                                       | |                                                                                       |\r\n            |                                                                                       | |                                                                                       |\r\n            |                                                                                       | |                                                                                       |\r\n            |                                                                                       | |                                                                                       |\r\n            |       /\\            /\\            /\\            /\\            /\\            /\\        | |        /\\            /\\            /\\            /\\            /\\            /\\       |\r\n            |      /  \\          /  \\          /  \\          /  \\          /  \\          /  \\       | |       /  \\          /  \\          /  \\          /  \\          /  \\          /  \\      |\r\n            |     /    \\        /    \\        /    \\        /    \\        /    \\        /    \\      | |      /    \\        /    \\        /    \\        /    \\        /    \\        /    \\     |\r\n            |    /      \\      /      \\      /      \\      /      \\      /      \\      /      \\     | |     /      \\      /      \\      /      \\      /      \\      /      \\      /      \\    |\r\n            |   /        \\    /        \\    /        \\    /        \\    /        \\    /        \\    | |    /        \\    /        \\    /        \\    /        \\    /        \\    /        \\   |\r\n            |  /          \\  /          \\  /          \\  /          \\  /          \\  /          \\   | |   /          \\  /          \\  /          \\  /          \\  /          \\  /          \\  |\r\n            | /            \\/            \\/            \\/            \\/            \\/            \\  | |  /            \\/            \\/            \\/            \\/            \\/            \\ |\r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            |{style.RED}       {\"            \".join(spike_row2[0])}                   {\"            \".join(spike_row2[1])}{style.WHITE}       |\r\n            |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n            |_________________________________________________________________________________________________________________________________________________________________________________|\r\n            \"\"\"\r\n        # vrati samotny gameboard s doplnenymi hodnotami\r\n        return gameboard\r\n\r\n    def command_detection(self, command:str, cfg:str) -> str:\r\n        command = command.lower()\r\n        with open(cfg, 'r') as config_file:\r\n            all_commands = json.load(config_file)['commands']\r\n        \r\n        if command in all_commands:\r\n            if command == \"presun\":\r\n                ...\r\n            elif command == \"hod\":\r\n                self.throw_dice(self.doubledice)\r\n            command = f\"{style.GREEN}{command}{style.RESET}\"\r\n        else:\r\n            command = f\"{style.RED}Prikaz {command} nenalezen{style.RESET}\"\r\n        self.last_command = command\r\n\r\nclass Menu:\r\n    def __init__(self, options, config) -> None:\r\n        self._options = options\r\n        self._conf = config\r\n\r\n    @property\r\n    def self_options(self):\r\n        return self._options\r\n    \r\n    @property\r\n    def self_conf(self):\r\n        return self._conf\r\n\r\n    \"\"\"\r\n        Predstava funkce menu:\r\n            -> uzivatel vybere moznost PLAY:\r\n                -> podle vyberu herniho modu se pokracuje\r\n                    PvE:\r\n                    - zatim nic\r\n                    PvP:\r\n                    - pokud pote vybere moznost nacist, hra pres load() vezme data z configu a pokracuje se ve hre\r\n                    - pokud vybere moznost Nova hra, spusti se funkce game_setup(), \r\n                        data se ulozi/prepisou do configu a nasledne se spusti funkce load()\r\n            -> uzivatel vybere moznost QUIT:\r\n                - cela hra se vypne \r\n    \"\"\"\r\n\r\n    def game_setup(self):\r\n        \r\n        # volba PVP, PVE\r\n        print(\" VITEJTE VE HRE VRHCABY! \\n      MOZNOSTI HRY        \\n       PvE    PvP\\n\")\r\n        \r\n        while True:\r\n            volba = input(\"vase volba : \")\r\n            volba.lower()\r\n            \r\n            if volba not in [\"pve\", \"pvp\"]:\r\n                print(\"Tento mod neni v nabidce.\")\r\n            else:\r\n                print(f\"Vybrali jste mod : {volba}\\n\")\r\n                break\r\n        \r\n        # zmena jmena\r\n        def zmena_jmena(i: int):\r\n                \r\n            while True:\r\n                max_delka = 10\r\n                print(f\"\\nZadejte jmeno pro hrace ({i}) | delka jmena 3 - 10\")\r\n                vybrane_jmeno = input(\"Zvolene jmeno: \")\r\n                        \r\n                if len(vybrane_jmeno) < 3 or len(vybrane_jmeno) > 10:\r\n                    print(\"Jmeno nesplnuje podminky!\")\r\n\r\n                else:\r\n                    return vybrane_jmeno\r\n        \r\n        def nastaveni_barvy(barvy: list, i: int):\r\n            while True:\r\n                print(f\"\\nVyberte barvu z nasledujicich: {barvy}\")\r\n                vybrana_barva = input(\"Zvolena barva: \")\r\n                \r\n                if vybrana_barva in barvy:\r\n                    barvy.remove(vybrana_barva)\r\n                    return vybrana_barva, barvy\r\n                \r\n                else:\r\n                    print(\"Tato barva se nenachazi v moznostech!\")\r\n                    \r\n    \r\n        # volba jmen PVP\r\n        if volba == \"pvp\":\r\n            barvy = [\"a\", \"b\", \"c\", \"d\"]                          # zatim orientacne, jen potreba doplnit barvy\r\n            \r\n            self._player1 = zmena_jmena(1)\r\n            #self._player1_barvy = nastaveni_barvy(barvy, 1)\r\n            self._player2 = zmena_jmena(2)\r\n            #self._player2_barvy = nastaveni_barvy(barvy, 2)\r\n            \r\n        \r\n        # volba jmen PvE\r\n        if volba == \"pve\":\r\n            \r\n            barvy = [\"a\", \"b\", \"c\", \"d\"]                          # zatim orientacne, jen potreba doplnit barvy\r\n            self._player1 = zmena_jmena(1)\r\n            #self._player1_barvy = nastaveni_barvy(barvy, 1)\r\n            self._player2 = \"AI\"\r\n            #self._player2_barvy = nastaveni_barvy(barvy, 2)\r\n\r\n    def load():\r\n        # v pripade vyberu moznosti nacist hru\r\n        ...\r\n\r\n    def play():\r\n        # presun do dalsi casti menu, moznosti budou nova hra a nacit hru\r\n        ...\r\n\r\n    def quit_game():\r\n        quit()\r\n\r\n\r\ndef main():\r\n    config_file = './cfg.json'\r\n    #menu1 = Menu('', 'cfg.json')\r\n    #menu1.game_setup()\r\n    game1 = Game(1,1, \"hrac1\", \"hrac2\")\r\n    # hod kostkami\r\n    #game1.doubledice = game1.throw_dice(game1.doubledice)\r\n    # vypis hry do konzole\r\n    style.clear()\r\n    print(style.YELLOW + \"Vítejte ve hře Vrhcáby\" + style.RESET)\r\n    while True:\r\n        \r\n        print(game1.gameboard_final(game1.doubledice, game1.spikes, game1.last_command))\r\n        print(style.GREEN + \"Made by: Jakub Ryšánek, Ondřej Thomas, Jakub Kepič\" + style.RESET)\r\n        cmd_line = input(\"> \")\r\n        game1.command_detection(cmd_line, config_file)\r\n    \r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/vrhcaby.py b/src/vrhcaby.py
--- a/src/vrhcaby.py	
+++ b/src/vrhcaby.py	
@@ -1,3 +1,5 @@
+import json
+import os
 import random
 import os
 import json
@@ -19,19 +21,42 @@
     RESET = '\033[0m'
 
     # vycisti konzoli
-    def clear():
+    def clear(self):
         os.system("cls")
 
+def throw_dice(dice: list) -> list:
+    dice.clear()
+    hod1, hod2 = random.randint(1, 6), random.randint(1, 6)
+    # kontrola hozenych hodnot
+    if hod1 != hod2:
+        dice.append(str(hod1))
+        dice.append(str(hod2))
+        return dice
+    # pokud se cisla rovnaji, vrati se 4x
+    else:
+        for _ in range(4):
+            dice.append(str(hod1))
+        return dice
+
+
+def spike_occupancy(spike_list: list) -> str:
+    # nedokonceny system
+    # vypisuje obsazenost spiku a zajistuje formatovani
+    if 0 <= len(spike_list) < 10:
+        remaining_spaces = " " * 5  # <-- doplneni mezer
+    else:  # |
+        remaining_spaces = " " * 4  # <--|
+    return f"[{len(spike_list)}]{remaining_spaces}"
 
 
 class Game:
-    
+
     def __init__(self, gameboard, pozice, player1, player2) -> None:
         # herni pole
         self._gameboard = gameboard
         # dvojkostka
         self._doubledice = []
-        self._spikes = [[] for j in range(24)]
+        self._spikes = [[] for _ in range(24)]
         # bar
         self._bar = ...
         self._stone = pozice
@@ -48,59 +73,34 @@
     @doubledice.setter
     def doubledice(self, value):
         self._doubledice = value
-    
+
     @property
     def gameboard(self):
         return self._gameboard
-    
+
     @property
     def spikes(self):
         return self._spikes
-    
+
     @property
     def last_command(self):
         return self._last_command
-    
+
     @last_command.setter
     def last_command(self, value):
         self._last_command = value
 
-    def throw_dice(self, dice:list) -> None:
-        dice.clear()
-        hod1, hod2 = random.randint(1, 6), random.randint(1, 6)
-        # kontrola hozenych hodnot
-        if hod1 != hod2:
-            dice.append(str(hod1))
-            dice.append(str(hod2))
-            return dice
-        # pokud se cisla rovnaji, vrati se 4x
-        else:
-            for _ in range(4):
-                dice.append(str(hod1))
-            return dice
-    
-    def spike_occupancy(self, spike_list:list) -> str:
-        
-        # nedokonceny system
-        # vypisuje obsazenost spiku a zajistuje formatovani
-        if 0 <= len(spike_list) < 10:
-            remaining_spaces = " " * 5 # <-- doplneni mezer
-        else:                          #    |
-            remaining_spaces = " " * 4 # <--|
-        return f"[{len(spike_list)}]{remaining_spaces}"
-
-
-    def gameboard_final(self, values:list, spikes:list, command:str) -> str:
+    def gameboard_final(self, values: list, spikes: list, command: str) -> str:
         s = spikes
         # dopocet chybejicich mezer kvuli formatovani
         if len(values) == 2:
-            spaces = 156*" "
+            spaces = 156 * " "
         else:
-            spaces = 150*" "
-        
+            spaces = 150 * " "
+
         # tvorba cislovani spiku
-        spike_row1 = ([str(_) for _ in range(1,7)], [str(_) for _ in range(7,10)], [str(_) for _ in range(10,13)])
-        spike_row2 = ([str(_) for _ in range(13,19)], [str(_) for _ in range(19, 25)])
+        spike_row1 = ([str(_) for _ in range(1, 7)], [str(_) for _ in range(7, 10)], [str(_) for _ in range(10, 13)])
+        spike_row2 = ([str(_) for _ in range(13, 19)], [str(_) for _ in range(19, 25)])
 
         # zatim je v tom bordel, pochopitelne to neni ani zdaleka finalni
         gameboard = f"""
@@ -114,7 +114,7 @@
             |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
             |{style.RED}       {"             ".join(spike_row1[0])}                    {"             ".join(spike_row1[1])}             {"            ".join(spike_row1[2])}{style.RESET}       |
             |---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
-            | \    {self.spike_occupancy(s[0])}/\     {s[1]}     /\     {s[2]}     /\     {s[3]}     /\     {s[4]}     /\     {s[5]}     /  | |  \            /\            /\            /\            /\            /\            / |
+            | \    {spike_occupancy(s[0])}/\     {s[1]}     /\     {s[2]}     /\     {s[3]}     /\     {s[4]}     /\     {s[5]}     /  | |  \            /\            /\            /\            /\            /\            / |
             |  \          /  \          /  \          /  \          /  \          /  \          /   | |   \          /  \          /  \          /  \          /  \          /  \          /  |
             |   \        /    \        /    \        /    \        /    \        /    \        /    | |    \        /    \        /    \        /    \        /    \        /    \        /   |
             |    \      /      \      /      \      /      \      /      \      /      \      /     | |     \      /      \      /      \      /      \      /      \      /      \      /    |
@@ -142,30 +142,37 @@
         # vrati samotny gameboard s doplnenymi hodnotami
         return gameboard
 
-    def command_detection(self, command:str, cfg:str) -> str:
+    # noinspection PyTypeChecker
+    def command_detection(self, command: str, cfg: str) -> str:
         command = command.lower()
         with open(cfg, 'r') as config_file:
             all_commands = json.load(config_file)['commands']
-        
+
         if command in all_commands:
             if command == "presun":
                 ...
             elif command == "hod":
-                self.throw_dice(self.doubledice)
+                throw_dice(self.doubledice)
             command = f"{style.GREEN}{command}{style.RESET}"
         else:
             command = f"{style.RED}Prikaz {command} nenalezen{style.RESET}"
         self.last_command = command
 
+
+def quit_game():
+    quit()
+
+
 class Menu:
     def __init__(self, options, config) -> None:
+        self._player2 = "AI"
         self._options = options
         self._conf = config
 
     @property
     def self_options(self):
         return self._options
-    
+
     @property
     def self_conf(self):
         return self._conf
@@ -184,97 +191,91 @@
                 - cela hra se vypne 
     """
 
+    @property
     def game_setup(self):
-        
+        return ()
+
         # volba PVP, PVE
         print(" VITEJTE VE HRE VRHCABY! \n      MOZNOSTI HRY        \n       PvE    PvP\n")
-        
+
         while True:
             volba = input("vase volba : ")
             volba.lower()
-            
+
             if volba not in ["pve", "pvp"]:
                 print("Tento mod neni v nabidce.")
             else:
                 print(f"Vybrali jste mod : {volba}\n")
                 break
-        
+
         # zmena jmena
         def zmena_jmena(i: int):
-                
+
             while True:
                 max_delka = 10
                 print(f"\nZadejte jmeno pro hrace ({i}) | delka jmena 3 - 10")
                 vybrane_jmeno = input("Zvolene jmeno: ")
-                        
+
                 if len(vybrane_jmeno) < 3 or len(vybrane_jmeno) > 10:
                     print("Jmeno nesplnuje podminky!")
 
                 else:
                     return vybrane_jmeno
-        
-        def nastaveni_barvy(barvy: list, i: int):
+
+        def nastaveni_barvy(barvy: list):
             while True:
                 print(f"\nVyberte barvu z nasledujicich: {barvy}")
                 vybrana_barva = input("Zvolena barva: ")
-                
+
                 if vybrana_barva in barvy:
                     barvy.remove(vybrana_barva)
                     return vybrana_barva, barvy
-                
+
                 else:
                     print("Tato barva se nenachazi v moznostech!")
-                    
-    
+
         # volba jmen PVP
         if volba == "pvp":
-            barvy = ["a", "b", "c", "d"]                          # zatim orientacne, jen potreba doplnit barvy
-            
+            barvy: list[str] = ["a", "b", "c", "d"]  # zatim orientacne, jen potreba doplnit barvy
+
             self._player1 = zmena_jmena(1)
-            #self._player1_barvy = nastaveni_barvy(barvy, 1)
+            # self._player1_barvy = nastaveni_barvy(barvy, 1)
             self._player2 = zmena_jmena(2)
-            #self._player2_barvy = nastaveni_barvy(barvy, 2)
-            
-        
+            # self._player2_barvy = nastaveni_barvy(barvy, 2)
+
         # volba jmen PvE
         if volba == "pve":
-            
-            barvy = ["a", "b", "c", "d"]                          # zatim orientacne, jen potreba doplnit barvy
+            barvy = ["a", "b", "c", "d"]  # zatim orientacne, jen potreba doplnit barvy
             self._player1 = zmena_jmena(1)
-            #self._player1_barvy = nastaveni_barvy(barvy, 1)
-            self._player2 = "AI"
-            #self._player2_barvy = nastaveni_barvy(barvy, 2)
+            # self._player1_barvy = nastaveni_barvy(barvy, 1)
+            # self._player2_barvy = nastaveni_barvy(barvy, 2)
 
-    def load():
+    def load(self):
         # v pripade vyberu moznosti nacist hru
         ...
 
-    def play():
+    def play(self):
         # presun do dalsi casti menu, moznosti budou nova hra a nacit hru
         ...
 
-    def quit_game():
-        quit()
 
-
+# noinspection PyArgumentList
 def main():
     config_file = './cfg.json'
-    #menu1 = Menu('', 'cfg.json')
-    #menu1.game_setup()
-    game1 = Game(1,1, "hrac1", "hrac2")
+    # menu1 = Menu('', 'cfg.json')
+    # menu1.game_setup()
+    game1 = Game(1, 1, "hrac1", "hrac2")
     # hod kostkami
-    #game1.doubledice = game1.throw_dice(game1.doubledice)
+    # game1.doubledice = game1.throw_dice(game1.doubledice)
     # vypis hry do konzole
-    style.clear()
+    clear()
     print(style.YELLOW + "Vítejte ve hře Vrhcáby" + style.RESET)
     while True:
-        
         print(game1.gameboard_final(game1.doubledice, game1.spikes, game1.last_command))
         print(style.GREEN + "Made by: Jakub Ryšánek, Ondřej Thomas, Jakub Kepič" + style.RESET)
         cmd_line = input("> ")
         game1.command_detection(cmd_line, config_file)
-    
-        
+
 
 if __name__ == "__main__":
-    main()
\ No newline at end of file
+    main()
Index: .idea/jsonSchemas.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jsonSchemas.xml b/.idea/jsonSchemas.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/jsonSchemas.xml	
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JsonSchemaMappingsProjectConfiguration">
+    <state>
+      <map>
+        <entry key="JSON Schema version 7">
+          <value>
+            <SchemaInfo>
+              <option name="name" value="JSON Schema version 7" />
+              <option name="relativePathToSchema" value="http://json-schema.org/draft-07/schema" />
+              <option name="schemaVersion" value="JSON Schema version 7" />
+              <option name="applicationDefined" value="true" />
+              <option name="patterns">
+                <list>
+                  <Item>
+                    <option name="path" value="src/cfg.json" />
+                  </Item>
+                </list>
+              </option>
+            </SchemaInfo>
+          </value>
+        </entry>
+      </map>
+    </state>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vrhcaby.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vrhcaby.iml b/.idea/vrhcaby.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/vrhcaby.iml	
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/vrhcaby.iml" filepath="$PROJECT_DIR$/.idea/vrhcaby.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/profiles_settings.xml	
@@ -0,0 +1,7 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="PROJECT_PROFILE" value="Default copy" />
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
